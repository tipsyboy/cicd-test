name: project cicd
on:
  push:
    branches: [main]
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
         distribution: temurin
         java-version: '17'

      - name: Build jar with Gradle (uses build cache)
        uses: gradle/actions/setup-gradle@v4

      - name: Gradle build
        run: |
         chmod +x ./gradlew
         ./gradlew clean bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/back:v${{ github.run_number }}

  deploy:
    name: Deploy to K8s
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH to K8s master and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: 175.197.41.119
          username: test
          password: qwer1234
          port: 224
          script: |
            echo "연결"
            
            ip addr
            
            if kubectl get svc tipsyboy-test-service -n yhm -o wide | grep -q "green"; then
              CURRENT_VER="green"
              NEXT_VER="blue"
            else
              CURRENT_VER="blue"
              NEXT_VER="green"
            fi
            
            cat <<EOF | kubectl apply -f -
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: spring-deployment-${NEXT_VER}
              namespace: yhm
            spec:
              selector:
                matchLabels:
                  type: app
                  ver: ${NEXT_VER}
              replicas: 1
              strategy:
                type: RollingUpdate
              template:
                metadata:
                  labels:
                    type: app
                    ver: ${NEXT_VER}
                spec:
                  volumes:
                    - name: mariadb-pvc
                      persistentVolumeClaim:
                        claimName: mariadb-pvc
            
                  containers:
                    - name: spring-app
                      image: tipsyboy/back:v${{ github.run_number }}
            
                      envFrom:
                        - configMapRef:
                            name: tipsyboy-config
            
                      livenessProbe:
                        httpGet:
                          path: /api/health
                          port: 8080
                          scheme: HTTP
                        initialDelaySeconds: 20
                        timeoutSeconds: 1
                        periodSeconds: 10
                        successThreshold: 1
                        failureThreshold: 3
            
                      readinessProbe:
                        httpGet:
                          path: /api/health
                          port: 8080
                          scheme: HTTP
                        initialDelaySeconds: 20
                        timeoutSeconds: 1
                        periodSeconds: 10
                        successThreshold: 3
                        failureThreshold: 3
            
                    - name: mariadb
                      image: mariadb:latest
                      ports:
                        - containerPort: 3306
                          protocol: TCP
                      envFrom:
                        - configMapRef:
                            name: tipsyboy-config
                      volumeMounts:
                        - name: mariadb-pvc
                          mountPath: /var/lib/mysql
            
                  terminationGracePeriodSeconds: 0
            EOF
            
            kubectl rollout status deployment/spring-deployment-${NEXT_VER} -n yhm
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Service
            metadata:
              name: tipsyboy-test-service
              namespace: yhm
            spec:
              selector:
                type: app
                ver: ${NEXT_VER}
              ports:
                - port: 8080
                  targetPort: 8080
              type: LoadBalancer
            EOF
            
            kubectl scale deployment spring-deployment-${CURRENT_VER} -n yhm --replicas=0