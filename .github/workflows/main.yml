name: project cicd
on:
  push:
    branches: [main]
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
         distribution: temurin
         java-version: '17'

      - name: Build jar with Gradle (uses build cache)
        uses: gradle/actions/setup-gradle@v4

      - name: Gradle build
        run: |
         chmod +x ./gradlew
         ./gradlew clean bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/back:v${{ github.run_number }}

  deploy:
    name: Deploy to K8s
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH to K8s master and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: 175.197.41.119
          username: test
          password: qwer1234
          port: 224
          script: |
            echo "연결"
            
            ip addr
            
            if kubectl get svc tipsyboy-test-service -n yhm -o wide | grep -q "green"; then
              CURRENT_VER="green"
              NEXT_VER="blue"
            else
              CURRENT_VER="blue"
              NEXT_VER="green"
            fi
            
            # 1. 새 Deployment 생성
            cat <<EOF | kubectl apply -f -
            # ... (기존 Deployment YAML)
            EOF
            
            # 2. 새 버전이 완전히 준비될 때까지 대기
            echo "Waiting for ${NEXT_VER} deployment to be ready..."
            kubectl rollout status deployment/spring-deployment-${NEXT_VER} -n yhm --timeout=300s
            
            # 3. 새 버전의 readiness 확인
            kubectl wait --for=condition=ready pod -l ver=${NEXT_VER} -n yhm --timeout=60s
            
            # 4. 트래픽 전환
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Service
            metadata:
              name: tipsyboy-test-service
              namespace: yhm
            spec:
              selector:
                type: app
                ver: ${NEXT_VER}
              ports:
                - port: 8080
                  targetPort: 8080
              type: LoadBalancer
              EOF
              
              # 5. 잠시 대기 후 이전 버전 제거
              echo "Waiting 30 seconds before scaling down ${CURRENT_VER}..."
              sleep 30
              
              # 6. 이전 버전 스케일 다운
              kubectl scale deployment spring-deployment-${CURRENT_VER} -n yhm --replicas=0
              
              # 7. 확인
              echo "Waiting for ${CURRENT_VER} pods to terminate..."
              kubectl wait --for=delete pod -l ver=${CURRENT_VER} -n yhm --timeout=120s